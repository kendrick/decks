{"version":3,"sources":["plugin/notes/notes.min.js"],"names":["RevealNotes","openNotes","notesFilePath","post","event","slideElement","Reveal","getCurrentSlide","notesElement","querySelector","fragmentElement","messageData","namespace","type","notes","markdown","whitespace","state","getState","hasAttribute","getAttribute","fragmentNotes","innerHTML","notesPopup","postMessage","JSON","stringify","onConnected","addEventListener","jsFileLocation","document","src","replace","window","open","this","connectInterval","setInterval","url","location","protocol","host","pathname","search","data","parse","clearInterval","test","match","shiftKey","altKey","ctrlKey","metaKey","getConfig","keyboard","keyCode","preventDefault","registerKeyboardShortcut"],"mappings":"AAWA,GAAIA,aAAc,WAEjB,QAASC,GAAWC,GA0CnB,QAASC,GAAMC,GAEd,GAAIC,GAAeC,OAAOC,kBACzBC,EAAeH,EAAaI,cAAe,eAC3CC,EAAkBL,EAAaI,cAAe,qBAE3CE,GACHC,UAAW,eACXC,KAAM,QACNC,MAAO,GACPC,UAAU,EACVC,WAAY,SACZC,MAAOX,OAAOY,WAUf,IANIb,EAAac,aAAc,gBAC9BR,EAAYG,MAAQT,EAAae,aAAc,cAC/CT,EAAYK,WAAa,YAItBN,EAAkB,CACrB,GAAIW,GAAgBX,EAAgBD,cAAe,cAC/CY,GACHb,EAAea,EAEPX,EAAgBS,aAAc,gBACtCR,EAAYG,MAAQJ,EAAgBU,aAAc,cAClDT,EAAYK,WAAa,WAGzBR,EAAe,MAKbA,IACHG,EAAYG,MAAQN,EAAac,UACjCX,EAAYI,SAAmE,gBAAjDP,GAAaY,aAAc,kBAG1DG,EAAWC,YAAaC,KAAKC,UAAWf,GAAe,KAQxD,QAASgB,KAGRrB,OAAOsB,iBAAkB,eAAgBzB,GACzCG,OAAOsB,iBAAkB,gBAAiBzB,GAC1CG,OAAOsB,iBAAkB,iBAAkBzB,GAC3CG,OAAOsB,iBAAkB,iBAAkBzB,GAC3CG,OAAOsB,iBAAkB,gBAAiBzB,GAC1CG,OAAOsB,iBAAkB,SAAUzB,GACnCG,OAAOsB,iBAAkB,UAAWzB,GAGpCA,IAtGD,IAAKD,EAAgB,CACpB,GAAI2B,GAAiBC,SAASrB,cAAc,2BAA2BsB,GACvEF,GAAiBA,EAAeG,QAAQ,oBAAqB,IAC7D9B,EAAgB2B,EAAiB,aAGlC,GAAIN,GAAaU,OAAOC,KAAMhC,EAAe,oBAAqB,wBAGlEqB,GAAWjB,OAAS6B,KAAK7B,OAQzB,WAEC,GAAI8B,GAAkBC,YAAa,WAClCd,EAAWC,YAAaC,KAAKC,WAC5Bd,UAAW,eACXC,KAAM,UACNyB,IAAKL,OAAOM,SAASC,SAAW,KAAOP,OAAOM,SAASE,KAAOR,OAAOM,SAASG,SAAWT,OAAOM,SAASI,OACzG1B,MAAOX,OAAOY,aACV,MACH,IAEHe,QAAOL,iBAAkB,UAAW,SAAUxB,GAC7C,GAAIwC,GAAOnB,KAAKoB,MAAOzC,EAAMwC,KACzBA,IAA2B,iBAAnBA,EAAKhC,WAA8C,cAAdgC,EAAK/B,OACrDiC,cAAeV,GACfT,UAyGJ,MA3BK,YAAYoB,KAAMd,OAAOM,SAASI,UAGmB,OAArDV,OAAOM,SAASI,OAAOK,MAAO,mBACjC/C,IAID6B,SAASF,iBAAkB,UAAW,SAAUxB,GAGH,OAAvC0B,SAASrB,cAAe,WAAuBL,EAAM6C,UAAY7C,EAAM8C,QAAU9C,EAAM+C,SAAW/C,EAAMgD,UAGxE,IAAhC9C,OAAO+C,YAAYC,UAEF,KAAlBlD,EAAMmD,UACTnD,EAAMoD,iBACNvD,OAEC,GAGCgC,OAAO3B,QAASA,OAAOmD,yBAA0B,IAAK,wBAIlDvB,KAAMjC","file":"notes.min.js","sourcesContent":["/**\n * Handles opening of and synchronization with the reveal.js\n * notes window.\n *\n * Handshake process:\n * 1. This window posts 'connect' to notes window\n *    - Includes URL of presentation to show\n * 2. Notes window responds with 'connected' when it is available\n * 3. This window proceeds to send the current presentation state\n *    to the notes window\n */\nvar RevealNotes = (function() {\n\n\tfunction openNotes( notesFilePath ) {\n\n\t\tif( !notesFilePath ) {\n\t\t\tvar jsFileLocation = document.querySelector('script[src$=\"notes.js\"]').src;  // this js file path\n\t\t\tjsFileLocation = jsFileLocation.replace(/notes\\.js(\\?.*)?$/, '');   // the js folder path\n\t\t\tnotesFilePath = jsFileLocation + 'notes.html';\n\t\t}\n\n\t\tvar notesPopup = window.open( notesFilePath, 'reveal.js - Notes', 'width=1100,height=700' );\n\n\t\t// Allow popup window access to Reveal API\n\t\tnotesPopup.Reveal = this.Reveal;\n\n\t\t/**\n\t\t * Connect to the notes window through a postmessage handshake.\n\t\t * Using postmessage enables us to work in situations where the\n\t\t * origins differ, such as a presentation being opened from the\n\t\t * file system.\n\t\t */\n\t\tfunction connect() {\n\t\t\t// Keep trying to connect until we get a 'connected' message back\n\t\t\tvar connectInterval = setInterval( function() {\n\t\t\t\tnotesPopup.postMessage( JSON.stringify( {\n\t\t\t\t\tnamespace: 'reveal-notes',\n\t\t\t\t\ttype: 'connect',\n\t\t\t\t\turl: window.location.protocol + '//' + window.location.host + window.location.pathname + window.location.search,\n\t\t\t\t\tstate: Reveal.getState()\n\t\t\t\t} ), '*' );\n\t\t\t}, 500 );\n\n\t\t\twindow.addEventListener( 'message', function( event ) {\n\t\t\t\tvar data = JSON.parse( event.data );\n\t\t\t\tif( data && data.namespace === 'reveal-notes' && data.type === 'connected' ) {\n\t\t\t\t\tclearInterval( connectInterval );\n\t\t\t\t\tonConnected();\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\t/**\n\t\t * Posts the current slide data to the notes window\n\t\t */\n\t\tfunction post( event ) {\n\n\t\t\tvar slideElement = Reveal.getCurrentSlide(),\n\t\t\t\tnotesElement = slideElement.querySelector( 'aside.notes' ),\n\t\t\t\tfragmentElement = slideElement.querySelector( '.current-fragment' );\n\n\t\t\tvar messageData = {\n\t\t\t\tnamespace: 'reveal-notes',\n\t\t\t\ttype: 'state',\n\t\t\t\tnotes: '',\n\t\t\t\tmarkdown: false,\n\t\t\t\twhitespace: 'normal',\n\t\t\t\tstate: Reveal.getState()\n\t\t\t};\n\n\t\t\t// Look for notes defined in a slide attribute\n\t\t\tif( slideElement.hasAttribute( 'data-notes' ) ) {\n\t\t\t\tmessageData.notes = slideElement.getAttribute( 'data-notes' );\n\t\t\t\tmessageData.whitespace = 'pre-wrap';\n\t\t\t}\n\n\t\t\t// Look for notes defined in a fragment\n\t\t\tif( fragmentElement ) {\n\t\t\t\tvar fragmentNotes = fragmentElement.querySelector( 'aside.notes' );\n\t\t\t\tif( fragmentNotes ) {\n\t\t\t\t\tnotesElement = fragmentNotes;\n\t\t\t\t}\n\t\t\t\telse if( fragmentElement.hasAttribute( 'data-notes' ) ) {\n\t\t\t\t\tmessageData.notes = fragmentElement.getAttribute( 'data-notes' );\n\t\t\t\t\tmessageData.whitespace = 'pre-wrap';\n\n\t\t\t\t\t// In case there are slide notes\n\t\t\t\t\tnotesElement = null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Look for notes defined in an aside element\n\t\t\tif( notesElement ) {\n\t\t\t\tmessageData.notes = notesElement.innerHTML;\n\t\t\t\tmessageData.markdown = typeof notesElement.getAttribute( 'data-markdown' ) === 'string';\n\t\t\t}\n\n\t\t\tnotesPopup.postMessage( JSON.stringify( messageData ), '*' );\n\n\t\t}\n\n\t\t/**\n\t\t * Called once we have established a connection to the notes\n\t\t * window.\n\t\t */\n\t\tfunction onConnected() {\n\n\t\t\t// Monitor events that trigger a change in state\n\t\t\tReveal.addEventListener( 'slidechanged', post );\n\t\t\tReveal.addEventListener( 'fragmentshown', post );\n\t\t\tReveal.addEventListener( 'fragmenthidden', post );\n\t\t\tReveal.addEventListener( 'overviewhidden', post );\n\t\t\tReveal.addEventListener( 'overviewshown', post );\n\t\t\tReveal.addEventListener( 'paused', post );\n\t\t\tReveal.addEventListener( 'resumed', post );\n\n\t\t\t// Post the initial state\n\t\t\tpost();\n\n\t\t}\n\n\t\tconnect();\n\n\t}\n\n\tif( !/receiver/i.test( window.location.search ) ) {\n\n\t\t// If the there's a 'notes' query set, open directly\n\t\tif( window.location.search.match( /(\\?|\\&)notes/gi ) !== null ) {\n\t\t\topenNotes();\n\t\t}\n\n\t\t// Open the notes when the 's' key is hit\n\t\tdocument.addEventListener( 'keydown', function( event ) {\n\t\t\t// Disregard the event if the target is editable or a\n\t\t\t// modifier is present\n\t\t\tif ( document.querySelector( ':focus' ) !== null || event.shiftKey || event.altKey || event.ctrlKey || event.metaKey ) return;\n\n\t\t\t// Disregard the event if keyboard is disabled\n\t\t\tif ( Reveal.getConfig().keyboard === false ) return;\n\n\t\t\tif( event.keyCode === 83 ) {\n\t\t\t\tevent.preventDefault();\n\t\t\t\topenNotes();\n\t\t\t}\n\t\t}, false );\n\n\t\t// Show our keyboard shortcut in the reveal.js help overlay\n\t\tif( window.Reveal ) Reveal.registerKeyboardShortcut( 'S', 'Speaker notes view' );\n\n\t}\n\n\treturn { open: openNotes };\n\n})();\n"],"sourceRoot":"../.."}